import logging

from aiogram.client.session.aiohttp import AiohttpSession
from aiogram.types import  CallbackQuery
import random
from aiogram import Bot, Dispatcher
from aiogram.types import  Message
from aiogram.types import FSInputFile
from datetime import timedelta
import asyncio
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from datetime import datetime
from aiogram.types import WebAppInfo
from aiogram import Router, F, types
import os
from aiogram.client.session.aiohttp import AiohttpSession

# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
IMAGES_DIR = os.path.join(BASE_DIR, '–ó–∞–¥–∞–Ω–∏—è')


router = Router()


# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
import logging
from aiogram import Bot, Dispatcher

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "..."
ADMIN_IDS = [1824224788, 7066386368]
session = AiohttpSession(proxy='http://proxy.server:3128')
bot = Bot(token='...', session=session)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –±–µ–∑ –ø—Ä–æ–∫—Å–∏

dp = Dispatcher()


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
kb_type1 = types.InlineKeyboardMarkup(inline_keyboard=[[
    types.InlineKeyboardButton(text="A", callback_data="ans_A"),
    types.InlineKeyboardButton(text="B", callback_data="ans_B"),
    types.InlineKeyboardButton(text="C", callback_data="ans_C"),
    types.InlineKeyboardButton(text="D", callback_data="ans_D")
]])

kb_type2 = types.InlineKeyboardMarkup(inline_keyboard=[[
    types.InlineKeyboardButton(text="A", callback_data="ans_A"),
    types.InlineKeyboardButton(text="B", callback_data="ans_B"),
    types.InlineKeyboardButton(text="C", callback_data="ans_C")
]])

kb_type3 = types.InlineKeyboardMarkup(inline_keyboard=[[
    types.InlineKeyboardButton(text="–ü—Ä–∞–≤–¥–∞", callback_data="ans_true"),
    types.InlineKeyboardButton(text="–õ–æ–∂—å", callback_data="ans_false")
]])

main_kb = types.ReplyKeyboardMarkup(keyboard=[
    [types.KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å")],
    [types.KeyboardButton(text="üìö –ó–∞–¥–∞–Ω–∏—è")],
    [types.KeyboardButton(text="üåê –ù–∞—à —Å–∞–π—Ç", web_app=WebAppInfo(url="https://vk.link/punctle"))]
], resize_keyboard=True)

admin_kb = types.InlineKeyboardMarkup(inline_keyboard=[
    [types.InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
    [types.InlineKeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")],
    [types.InlineKeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users")],
])

# –°–ø—Ä–∞–≤–æ—á–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
reference = {
    'ssp': """üìù –°–°–ü - –°–ª–æ–∂–Ω–æ—Å–æ—á–∏–Ω—ë–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è

‚Ä¢ –ß–∞—Å—Ç–∏ —Ä–∞–≤–Ω–æ–ø—Ä–∞–≤–Ω—ã –ø–æ —Å–º—ã—Å–ª—É
‚Ä¢ –°–æ–µ–¥–∏–Ω—è—é—Ç—Å—è —Å–æ—á–∏–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Å–æ—é–∑–∞–º–∏: –ò, –ê, –ù–û, –ò–õ–ò, –õ–ò–ë–û, –î–ê (–≤ –∑–Ω–∞—á–µ–Ω–∏–∏ –ù–û)
‚Ä¢ –ü–µ—Ä–µ–¥ —Å–æ—é–∑–∞–º–∏ —Å—Ç–∞–≤–∏—Ç—Å—è –∑–∞–ø—è—Ç–∞—è

‚úèÔ∏è –ü—Ä–∏–º–µ—Ä: –°–æ–ª–Ω—Ü–µ —Å–≤–µ—Ç–∏–ª–æ —è—Ä–∫–æ, –∏ –ø—Ç–∏—Ü—ã –ø–µ–ª–∏ –≤ —Å–∞–¥—É.""",

    'spp': """üìù –°–ü–ü - –°–ª–æ–∂–Ω–æ–ø–æ–¥—á–∏–Ω—ë–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è

‚Ä¢ –°–æ—Å—Ç–æ—è—Ç –∏–∑ –≥–ª–∞–≤–Ω–æ–π –∏ –ø—Ä–∏–¥–∞—Ç–æ—á–Ω–æ–π —á–∞—Å—Ç–∏
‚Ä¢ –ü—Ä–∏–¥–∞—Ç–æ—á–Ω–∞—è —á–∞—Å—Ç—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç—Å—è –ø–æ–¥—á–∏–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Å–æ—é–∑–∞–º–∏: –ß–¢–û, –ß–¢–û–ë–´, –ü–û–¢–û–ú–£ –ß–¢–û, –ï–°–õ–ò, –ö–û–ì–î–ê, –ö–û–¢–û–†–´–ô, –ì–î–ï, –ö–£–î–ê
‚Ä¢ –ó–∞–ø—è—Ç–∞—è —Å—Ç–∞–≤–∏—Ç—Å—è –Ω–∞ –≥—Ä–∞–Ω–∏—Ü–µ –≥–ª–∞–≤–Ω–æ–π –∏ –ø—Ä–∏–¥–∞—Ç–æ—á–Ω–æ–π —á–∞—Å—Ç–µ–π

‚úèÔ∏è –ü—Ä–∏–º–µ—Ä: –Ø –∑–Ω–∞—é (–≥–ª–∞–≤–Ω–∞—è —á–∞—Å—Ç—å), —á—Ç–æ –∑–∞–≤—Ç—Ä–∞ –±—É–¥–µ—Ç –¥–æ–∂–¥—å (–ø—Ä–∏–¥–∞—Ç–æ—á–Ω–∞—è —á–∞—Å—Ç—å)

üìå –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –°–ü–ü:
‚Ä¢ –ü—Ä–∏–¥–∞—Ç–æ—á–Ω–∞—è —á–∞—Å—Ç—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —Å–æ—é–∑–æ–≤ –∏–ª–∏ —Å–æ—é–∑–Ω—ã—Ö —Å–ª–æ–≤
‚Ä¢ –ì–ª–∞–≤–Ω–∞—è —á–∞—Å—Ç—å - —ç—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ

3 –≤–∏–¥–∞ –ø–æ–¥—á–∏–Ω–µ–Ω–∏—è:
1. –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ - –æ–¥–Ω–∞ –ø—Ä–∏–¥–∞—Ç–æ—á–Ω–∞—è –ø–æ–¥—á–∏–Ω—è–µ—Ç—Å—è –¥—Ä—É–≥–æ–π
2. –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ - –ø—Ä–∏–¥–∞—Ç–æ—á–Ω—ã–µ –æ–¥–∏–Ω–∞–∫–æ–≤–æ –ø–æ–¥—á–∏–Ω—è—é—Ç—Å—è –≥–ª–∞–≤–Ω–æ–π
3. –û–¥–Ω–æ—Ä–æ–¥–Ω–æ–µ - –ø—Ä–∏–¥–∞—Ç–æ—á–Ω—ã–µ —Ä–∞–≤–Ω–æ–ø—Ä–∞–≤–Ω—ã –º–µ–∂–¥—É —Å–æ–±–æ–π""",

    'bsp': """üìù –ë–°–ü - –ë–µ—Å—Å–æ—é–∑–Ω—ã–µ —Å–ª–æ–∂–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è

‚Ä¢ –ß–∞—Å—Ç–∏ —Å–æ–µ–¥–∏–Ω—è—é—Ç—Å—è –±–µ–∑ —Å–æ—é–∑–æ–≤
‚Ä¢ –ó–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –∑–∞–≤–∏—Å—è—Ç –æ—Ç —Å–º—ã—Å–ª–æ–≤—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π

üìå –ó–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è:

–ó–∞–ø—è—Ç–∞—è (,) —Å—Ç–∞–≤–∏—Ç—Å—è:
‚Ä¢ –ü—Ä–∏ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏–π –∏–ª–∏ —è–≤–ª–µ–Ω–∏–π
‚úèÔ∏è –ü—Ä–∏–º–µ—Ä: –°–≤–µ—Ç–∏—Ç —Å–æ–ª–Ω—Ü–µ, –ø–æ—é—Ç –ø—Ç–∏—Ü—ã, —à—É–º—è—Ç –¥–µ—Ä–µ–≤—å—è.

–î–≤–æ–µ—Ç–æ—á–∏–µ (:) —Å—Ç–∞–≤–∏—Ç—Å—è:
‚Ä¢ –ï—Å–ª–∏ –≤—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å –ø–æ—è—Å–Ω—è–µ—Ç –ø–µ—Ä–≤—É—é
‚Ä¢ –ï—Å–ª–∏ –≤—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å —É–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏—á–∏–Ω—É
‚úèÔ∏è –ü—Ä–∏–º–µ—Ä: –Ø –Ω–µ –ø–æ—à—ë–ª –≥—É–ª—è—Ç—å: –Ω–∞ —É–ª–∏—Ü–µ —à—ë–ª –¥–æ–∂–¥—å.

–¢–∏—Ä–µ (-) —Å—Ç–∞–≤–∏—Ç—Å—è:
‚Ä¢ –ï—Å–ª–∏ –≤—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–µ–¥—Å—Ç–≤–∏–µ, —Ä–µ–∑—É–ª—å—Ç–∞—Ç
‚Ä¢ –ü—Ä–∏ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏
‚Ä¢ –ü—Ä–∏ –±—ã—Å—Ç—Ä–æ–π —Å–º–µ–Ω–µ —Å–æ–±—ã—Ç–∏–π
‚úèÔ∏è –ü—Ä–∏–º–µ—Ä: –°–≤–µ—Ä–∫–Ω—É–ª–∞ –º–æ–ª–Ω–∏—è - —Ä–∞–∑–¥–∞–ª—Å—è –≥—Ä–æ–º."""
}


# –•—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–∞–Ω–Ω—ã—Ö
users = {}
user_tasks = {}
user_completion = {}
subscribed_users = set()
notification_tasks = {}
unlimited_users = set()
user_streaks = {}
user_last_tasks = {}
TESTER_IDS = set()

dp = Dispatcher()


sticker_id = 'CAACAgIAAxkBAAEOaXRn__lNwJ0qXBvl1z_wO8F0dZZSSgACiW0AAl1kAUjRgGfXDULIzzYE'

# –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
@dp.message(Command("start"))
async def start(message: types.Message):
    user_id = message.from_user.id
    users[user_id] = {
        "username": message.from_user.username or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
        "reg_date": datetime.now().strftime("%d.%m.%Y"),
        "tasks_completed": 0,
        "last_active": datetime.now().strftime("%d.%m.%Y")
    }

    await message.reply_sticker(sticker_id)
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏! üìö\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
        reply_markup=main_kb
    )


@dp.message(Command('help'))
async def help_command(message: Message):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–°–°–ü", callback_data="show_ssp"),
            InlineKeyboardButton(text="–°–ü–ü", callback_data="show_spp"),
            InlineKeyboardButton(text="–ë–°–ü", callback_data="show_bsp")
        ],
        [InlineKeyboardButton(text="–ü–æ–ª–Ω—ã–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫", callback_data="show_full")]
    ])

    help_text = """
–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Å –ø—É–Ω–∫—Ç—É–∞—Ü–∏–µ–π –≤ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.

–°–æ–∑–¥–∞—Ç–µ–ª–∏ –±–æ—Ç–∞: @Kr1stal1ty, @giepei
–†–µ–¥–∞–∫—Ç–æ—Ä –±–æ—Ç–∞: @L3thalL0v3
–î–∏–∑–∞–π–Ω–µ—Ä —Å—Ç–∏–∫–µ—Ä–æ–≤: @QwertYnG0
–¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫–∏: @lxnofg, @real1st9

–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç: 2200700409709424
–¢-–±–∞–Ω–∫"""


    await message.answer(help_text, reply_markup=kb)

@dp.callback_query(F.data.startswith("show_"))
async def process_show_callback(callback: CallbackQuery):
    section = callback.data.split("_")[1]

    if section == "full":
        full_text = (
            f"{reference['ssp']}\n\n"
            f"{reference['spp']}\n\n"
            f"{reference['bsp']}"
        )
        await callback.message.edit_text(full_text, reply_markup=get_back_kb())
    else:
        await show_section(callback.message, section)

    await callback.answer()
async def show_section(message: Message, section: str):
    if section in reference:
        await message.edit_text(
            reference[section],
            reply_markup=get_back_kb()
        )
def get_back_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–°–°–ü", callback_data="show_ssp"),
            InlineKeyboardButton(text="–°–ü–ü", callback_data="show_spp"),
            InlineKeyboardButton(text="–ë–°–ü", callback_data="show_bsp")
        ],
        [InlineKeyboardButton(text="–ü–æ–ª–Ω—ã–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫", callback_data="show_full")]
    ])







@dp.message(lambda m: m.text == "üìö –ó–∞–¥–∞–Ω–∏—è")
async def start_tasks(message: types.Message):
    user_id = message.from_user.id
    current_date = datetime.now().strftime("%Y-%m-%d")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–ø–æ–ª–Ω—è–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–¥–∞–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è
    if user_id in user_last_tasks:
        last_task_date = user_last_tasks[user_id]
        if last_task_date == current_date:
            await message.answer(
                "‚è≥ –ù–∞ —Å–µ–≥–æ–¥–Ω—è –ª–∏–º–∏—Ç –∑–∞–¥–∞–Ω–∏–π –∏—Å—á–µ—Ä–ø–∞–Ω.\n"
                "–ù–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –∑–∞–≤—Ç—Ä–∞ –≤ 00:00!"
            )
            return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª –∑–∞–¥–∞–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è
    random_tasks = random.sample(BD, 3)
    user_tasks[user_id] = {
        'tasks': random_tasks,
        'current': 0,
        'correct': 0
    }
    user_last_tasks[user_id] = current_date

    await message.answer(
        "üéØ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ!\n"
        "‚ö†Ô∏è –ù–∞–ø–æ–º–∏–Ω–∞–µ–º: –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ 3 –∑–∞–¥–∞–Ω–∏—è –≤ –¥–µ–Ω—å."
    )
    await send_task(user_id, random_tasks[0])
async def reset_daily_limits():
    while True:
        now = datetime.now()
        # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è 00:00
        tomorrow = now.replace(hour=0, minute=0, second=0, microsecond=0) + timedelta(days=1)
        await asyncio.sleep((tomorrow - now).total_seconds())
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        user_last_tasks.clear()
        logging.info("Daily task limits have been reset")
async def send_task(user_id: int, task: dict):
    try:
        if task['type'] in ['type1', 'type2', 'type3']:
            keyboard = task.get('keyboard', None)
            await bot.send_photo(
                user_id,
                FSInputFile(task['image']),
                reply_markup=keyboard
            )
        elif task['type'] == 'type4':
            await bot.send_photo(user_id, FSInputFile(task['image']))
            await bot.send_message(user_id, task['instruction'])
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞–Ω–∏—è {task['id']}: {e}")
        await bot.send_message(user_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–¥–∞–Ω–∏—è.")






# –°—Ç–∏–∫–µ—Ä—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
STICKERS = {
    'perfect': [
        'CAACAgIAAxkBAAEOYvxn_r8PX1S_ApSJ_TfrLUPbvQfwOQACS34AAlKQ-EtkjVo7I27D9zYE',  # —Ä–∞–¥–æ—Å—Ç—å
        'CAACAgIAAxkBAAEOYwRn_r8TJaNKxZ8akoEfnUJSAbzM9QACX24AAn8h-EvNmTP3VhXccjYE',  # –ø–æ–±–µ–¥–∞
        'CAACAgIAAxkBAAEOYv5n_r8QpzVaU2A4vcwbMCfynFOJoAAC4XUAAq7r-UsxWMpRengxODYE'  # —Å—É–ø–µ—Ä
    ],
    'good': [
        'CAACAgIAAxkBAAEOaWhn__lH72qhs7rORswnCMWkNea3RwACzGcAAo3xAAFIfHe3DjDnR3o2BA',  # –º–æ–ª–æ–¥–µ—Ü
        'CAACAgIAAxkBAAEOaWxn__lJpTpMtfqkmxNlyZHPz7sjVwACZ3MAAhNGAAFIRiKuI6MpTY82BA',  # —Ö–æ—Ä–æ—à–æ
        'CAACAgIAAxkBAAEOaWZn__lGJ22NUhjRt6jE1kbMl6WQigACn2sAAg3IAUgqhIYKrIPMMDYE'  # –Ω–µ–ø–ª–æ—Ö–æ
    ],
    'wrong': [
        'CAACAgIAAxkBAAEOYwZn_r8UJ44Lm__qDvZgHDU9G6ZMFAACyXkAAgLt8EsUYcIk5V3hETYE',  # –æ—à–∏–±–∫–∞
        'CAACAgIAAxkBAAEOYwJn_r8SKR0Cqs0M2cDCXOtaHNP1OgACZHMAAgaP-EubryFGiNRBHDYE',  # –ø–æ–¥—É–º–∞–π
        'CAACAgIAAxkBAAEOaXBn__lMGm9dajgaAk0iahJNdSdxqwACmXEAAr4AAQFI2oiiDmKHvqg2BA'  # –Ω–µ–≤–µ—Ä–Ω–æ
    ]
}
# –°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
MESSAGES = {
    'perfect': [
        "üåü –ë–ª–µ—Å—Ç—è—â–µ! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!",
        "‚ú® –ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ! –¢—ã –Ω–∞ –≤–µ—Ä–Ω–æ–º –ø—É—Ç–∏!",
        "üéØ –ò–¥–µ–∞–ª—å–Ω–æ! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!"
    ],
    'good': [
        "üëç –•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!",
        "üí™ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!",
        "üòä –ú–æ–ª–æ–¥–µ—Ü!"
    ],
    'wrong': [
        "üìö –ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –ø–æ–ª—É—á–∏—Ç—Å—è –ª—É—á—à–µ!",
        "üéØ –ü—Ä–∞–∫—Ç–∏–∫–∞ –≤–µ–¥–µ—Ç –∫ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤—É!",
        "üí° –£—á–∏–º—Å—è –Ω–∞ –æ—à–∏–±–∫–∞—Ö!"
    ]
}

@dp.callback_query(lambda c: c.data.startswith("ans_"))
async def check_answer(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user = user_tasks[user_id]
    task = user['tasks'][user['current']]
    answer = callback.data.split("_")[1]  # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –î–æ–±–∞–≤–∏–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    logging.info(f"User answer: {answer}, Correct answer: {task['correct']}, Task ID: {task['id']}")

    # –ü—Ä–∏–≤–æ–¥–∏–º –æ–±–∞ –∑–Ω–∞—á–µ–Ω–∏—è –∫ –æ–¥–Ω–æ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    is_correct = answer.upper() == task['correct'].upper()
    user['correct'] += 1 if is_correct else 0

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å—Ç–∏–∫–µ—Ä–∞
    if is_correct:
        sticker_category = 'perfect' if user['correct'] > 2 else 'good'
    else:
        sticker_category = 'wrong'

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä
    await callback.message.answer_sticker(
        random.choice(STICKERS[sticker_category])
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
    if is_correct:
        await callback.message.answer(random.choice(MESSAGES[sticker_category]))
    else:
        await callback.message.answer(
            f"{random.choice(MESSAGES['wrong'])}\n\n"
            f"üìù –ü–æ—è—Å–Ω–µ–Ω–∏–µ:\n{task['explanation']}\n\n"
            f"‚ú® –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {task['correct']}"
        )

    # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await callback.message.edit_reply_markup(reply_markup=None)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∑–∞–¥–∞–Ω–∏—é –∏–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    user['current'] += 1
    if user['current'] < len(user['tasks']):
        await asyncio.sleep(2)
        await send_task(user_id, user['tasks'][user['current']])
    else:
        await show_results(user_id, callback.message)
# –í —Ñ—É–Ω–∫—Ü–∏–∏ show_results –¥–æ–±–∞–≤—å—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async def show_results(user_id: int, message: types.Message):
    user = user_tasks[user_id]
    correct = user['correct']
    total = len(user['tasks'])

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    users[user_id]["tasks_completed"] += correct
    users[user_id]["last_active"] = datetime.now().strftime("%d.%m.%Y")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    if correct == total:
        category = 'perfect'
        user_streaks[user_id] = user_streaks.get(user_id, 0) + 1
        result = f"""üéâ –í–µ–ª–∏–∫–æ–ª–µ–ø–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!
üìä –°—á–µ—Ç: {correct}/{total}
üî• –°—Ç—Ä–∏–∫: {user_streaks[user_id]} –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥"""
    elif correct >= total * 0.7:
        category = 'good'
        result = f"""üëç –•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!
üìä –°—á–µ—Ç: {correct}/{total}"""
    else:
        category = 'wrong'
        result = f"""üìö –ï—Å—Ç—å –∫—É–¥–∞ —Ä–∞—Å—Ç–∏!
üìä –°—á–µ—Ç: {correct}/{total}"""

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä
    await message.answer_sticker(random.choice(STICKERS[category]))



    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await message.answer(
        f"{result}\n\n"
        "‚è≥ –°–ª–µ–¥—É—é—â–∏–µ –∑–∞–¥–∞–Ω–∏—è –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –∑–∞–≤—Ç—Ä–∞ –≤ 00:00!"
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∏—á–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    if category == 'perfect':
        await asyncio.sleep(1)
        await message.answer("üåü –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! –¢—ã –¥–µ–ª–∞–µ—à—å –±–æ–ª—å—à–∏–µ —É—Å–ø–µ—Ö–∏!")



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
@dp.message(lambda m: m.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def show_profile(message: types.Message):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if user_id not in users:
        users[user_id] = {
            "username": message.from_user.username or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
            "reg_date": datetime.now().strftime("%d.%m.%Y"),
            "tasks_completed": 0,
            "last_active": datetime.now().strftime("%d.%m.%Y")
        }
        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø —Å–æ–∑–¥–∞–ª –¥–ª—è –≤–∞—Å –ø—Ä–æ—Ñ–∏–ª—å.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º."
        )

    user = users[user_id]
    streak = user_streaks.get(user_id, 0)

    # –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    total_tasks = user['tasks_completed']

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å
    level, next_level = calculate_level(total_tasks)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    notifications_status = "üîî –í–∫–ª—é—á–µ–Ω—ã" if user_id in subscribed_users else "üîï –í—ã–∫–ª—é—á–µ–Ω—ã"

    profile_text = f"""
üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

üìù –ò–º—è: @{user['username']}
üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user['reg_date']}

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –í—Å–µ–≥–æ —Ä–µ—à–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {total_tasks}
‚Ä¢ –¢–µ–∫—É—â–∏–π —Å—Ç—Ä–∏–∫: {streak} –¥–Ω–µ–π üî•

üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:
‚Ä¢ –£—Ä–æ–≤–µ–Ω—å: {level}
‚Ä¢ –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: {next_level - total_tasks} –∑–∞–¥–∞–Ω–∏–π

üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {notifications_status}
‚è±Ô∏è –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user['last_active']}
"""

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    notification_text = "üîï –í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" if user_id in subscribed_users else "üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"

    profile_kb = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üìä –†–µ–π—Ç–∏–Ω–≥", callback_data="leaderboard")],
        [types.InlineKeyboardButton(text=notification_text, callback_data="toggle_notifications")]
    ])

    try:
        await message.answer(profile_text, reply_markup=profile_kb)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–π—Ç–∏–Ω–≥–∞
@dp.callback_query(lambda c: c.data == "leaderboard")
async def show_leaderboard(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    sorted_users = sorted(
        users.items(),
        key=lambda x: x[1]['tasks_completed'],
        reverse=True
    )[:10]

    leaderboard_text = "üèÜ –¢–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
    for i, (user_id, user_data) in enumerate(sorted_users, 1):
        leaderboard_text += f"{i}. @{user_data['username']} - {user_data['tasks_completed']} –∑–∞–¥–∞–Ω–∏–π\n"

    notification_text = "üîï –í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" if user_id in subscribed_users else "üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
    back_kb = types.InlineKeyboardMarkup(inline_keyboard=[
    [types.InlineKeyboardButton(text=notification_text, callback_data="toggle_notifications")],
    [types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é", callback_data="back_to_profile")]
    ])

    await callback.message.edit_text(leaderboard_text, reply_markup=back_kb)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
@dp.callback_query(lambda c: c.data == "toggle_notifications")
async def toggle_notifications(callback: types.CallbackQuery):
    user_id = callback.from_user.id

    if user_id in subscribed_users:
        subscribed_users.discard(user_id)
        if user_id in notification_tasks:
            notification_tasks[user_id].cancel()
        notification_status = "üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã"
    else:
        subscribed_users.add(user_id)
        await schedule_next_notification(user_id)
        notification_status = "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã"

    await callback.answer(notification_status)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if callback.message.text.startswith("üë§ –ü—Ä–æ—Ñ–∏–ª—å"):
        await back_to_profile(callback)
    elif callback.message.text.startswith("üèÜ –¢–æ–ø"):
        await show_leaderboard(callback)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø—Ä–æ—Ñ–∏–ª—é
@dp.callback_query(lambda c: c.data == "back_to_profile")
async def back_to_profile(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user = users[user_id]
    streak = user_streaks.get(user_id, 0)

    # –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    total_tasks = user['tasks_completed']

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å
    level, next_level = calculate_level(total_tasks)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    notifications_status = "üîî –í–∫–ª—é—á–µ–Ω—ã" if user_id in subscribed_users else "üîï –í—ã–∫–ª—é—á–µ–Ω—ã"

    profile_text = f"""
üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

üìù –ò–º—è: @{user['username']}
üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user['reg_date']}

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –í—Å–µ–≥–æ —Ä–µ—à–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {total_tasks}
‚Ä¢ –¢–µ–∫—É—â–∏–π —Å—Ç—Ä–∏–∫: {streak} –¥–Ω–µ–π üî•

üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:
‚Ä¢ –£—Ä–æ–≤–µ–Ω—å: {level}
‚Ä¢ –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: {next_level - total_tasks} –∑–∞–¥–∞–Ω–∏–π

üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {notifications_status}
‚è±Ô∏è –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user['last_active']}
"""

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    notification_text = "üîï –í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" if user_id in subscribed_users else "üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"

    profile_kb = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üìä –†–µ–π—Ç–∏–Ω–≥", callback_data="leaderboard")],
        [types.InlineKeyboardButton(text=notification_text, callback_data="toggle_notifications")]
    ])

    await callback.message.edit_text(profile_text, reply_markup=profile_kb)

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def calculate_level(tasks):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if tasks >= 100:
        return "–≠–∫—Å–ø–µ—Ä—Ç üéì", 999
    elif tasks >= 50:
        return "–ó–Ω–∞—Ç–æ–∫ üìö", 100
    elif tasks >= 25:
        return "–°—Ç—É–¥–µ–Ω—Ç üìñ", 50
    elif tasks >= 10:
        return "–£—á–µ–Ω–∏–∫ üìù", 25
    else:
        return "–ù–æ–≤–∏—á–æ–∫ üî∞", 10

def get_rank(accuracy):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–∞–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–æ—á–Ω–æ—Å—Ç–∏"""
    if accuracy >= 95:
        return "üèÜ –õ–µ–≥–µ–Ω–¥–∞"
    elif accuracy >= 90:
        return "üíé –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª"
    elif accuracy >= 80:
        return "ü•á –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π"
    elif accuracy >= 70:
        return "ü•à –û–ø—ã—Ç–Ω—ã–π"
    elif accuracy >= 60:
        return "ü•â –ü—Ä–∞–∫—Ç–∏–∫"
    else:
        return "üéØ –ù–∞—á–∏–Ω–∞—é—â–∏–π"

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async def schedule_next_notification(user_id: int):
    """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
    now = datetime.now()
    next_notification = now.replace(hour=6, minute=0, second=0)
    if now.hour >= 6:
        next_notification += timedelta(days=1)

    delay = (next_notification - now).total_seconds()
    task = asyncio.create_task(send_notification(user_id, delay))
    notification_tasks[user_id] = task

async def send_notification(user_id: int, delay: float):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
    try:
        await asyncio.sleep(delay)
        await bot.send_message(user_id, "üéØ –î–æ—Å—Ç—É–ø–Ω—ã –Ω–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è!")
        await schedule_next_notification(user_id)
    except asyncio.CancelledError:
        pass
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {user_id}: {e}")







# –ê–¥–º–∏–Ω-—Ñ—É–Ω–∫—Ü–∏–∏
@dp.message(Command("admin"))
async def admin_panel(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    await message.answer("üë®‚Äçüíº –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=admin_kb)

@dp.callback_query(lambda c: c.data == "admin_stats")
async def admin_stats(callback: types.CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS:
        return

    total_users = len(users)
    active_users = len([u for u in users.values() if u['last_active'] == datetime.now().strftime("%d.%m.%Y")])
    total_tasks = sum(u['tasks_completed'] for u in users.values())

    stats_text = f"""
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:

üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {active_users}
üìö –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {total_tasks}
üîî –ü–æ–¥–ø–∏—Å–∞–Ω–æ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {len(subscribed_users)}
    """
    await callback.message.edit_text(stats_text)

@dp.callback_query(lambda c: c.data == "admin_broadcast")
async def admin_broadcast(callback: types.CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS:
        return

    await callback.message.edit_text(
        "üì¢ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "/send –í–∞—à —Ç–µ–∫—Å—Ç"
    )

@dp.message(Command("send"))
async def send_broadcast(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return

    broadcast_text = message.text.replace("/send ", "")
    successful = 0
    failed = 0

    for user_id in users:
        try:
            await bot.send_message(user_id, broadcast_text)
            successful += 1
        except Exception as e:
            failed += 1
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {user_id}: {e}")

    await message.answer(
        f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\n"
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {successful}\n"
        f"‚ùå –ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {failed}"
    )

@dp.callback_query(lambda c: c.data == "admin_users")
async def admin_users(callback: types.CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS:
        return

    users_text = "üë• –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n"
    for user_id, data in users.items():
        users_text += (
            f"ID: {user_id}\n"
            f"Username: @{data['username']}\n"
            f"–†–µ–≥.: {data['reg_date']}\n"
            f"–ó–∞–¥–∞–Ω–∏–π: {data['tasks_completed']}\n"
            f"–°—Ç—Ä–∏–∫: {user_streaks.get(user_id, 0)}\n"
            f"–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {data['last_active']}\n\n"
        )

    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –¥–ª–∏–Ω–Ω—ã–π
    if len(users_text) > 4096:
        for x in range(0, len(users_text), 4096):
            chunk = users_text[x:x + 4096]
            await callback.message.answer(chunk)
    else:
        await callback.message.edit_text(users_text)



# –û–±–Ω–æ–≤–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é start_tasks –¥–ª—è —É—á–µ—Ç–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫–æ–≤
@dp.message(lambda m: m.text == "üìö –ó–∞–¥–∞–Ω–∏—è")
async def start_tasks(message: types.Message):
    user_id = message.from_user.id
    current_date = datetime.now().strftime("%Y-%m-%d")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫–æ–º
    if user_id not in TESTER_IDS:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if user_id in user_last_tasks:
            last_task_date = user_last_tasks[user_id]
            if last_task_date == current_date:
                await message.answer(
                    "‚è≥ –ù–∞ —Å–µ–≥–æ–¥–Ω—è –ª–∏–º–∏—Ç –∑–∞–¥–∞–Ω–∏–π –∏—Å—á–µ—Ä–ø–∞–Ω.\n"
                    "–ù–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –∑–∞–≤—Ç—Ä–∞ –≤ 00:00!"
                )
                return

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–¥–∞–Ω–∏—è
    random_tasks = random.sample(BD, 3)
    user_tasks[user_id] = {
        'tasks': random_tasks,
        'current': 0,
        'correct': 0
    }

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if user_id not in TESTER_IDS:
        user_last_tasks[user_id] = current_date
        await message.answer(
            "üéØ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ!\n"
            "‚ö†Ô∏è –ù–∞–ø–æ–º–∏–Ω–∞–µ–º: –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ 3 –∑–∞–¥–∞–Ω–∏—è –≤ –¥–µ–Ω—å."
        )
    else:
        await message.answer("üéØ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ!")

    await send_task(user_id, random_tasks[0])





# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
BD = [
    # –ó–∞–¥–∞–Ω–∏—è —Ç–∏–ø–∞ 1 (A, B, C, D)
    {
        'id' : 1,
        'image': r'/home/KrE3st/bot/–ó–∞–¥–∞–Ω–∏—è/–ó–∞–¥–∞–Ω–∏—è 1/1.1.png',
        'correct': 'A',
        'type': 'type1',
        'keyboard': kb_type1,
        'explanation': '''–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–ª–æ–∂–Ω–æ–µ, —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 5 —á–∞—Å—Ç–µ–π, –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å –æ—Ç–¥–µ–ª—è–µ–º –∑–∞–ø—è—Ç–æ–π.
–°–¥–µ–ª–∞–µ–º —Å—Ö–µ–º—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:
(1 —Ö–æ—Ç—è...), [2 ...], (3 —á—Ç–æ...), (4 —á—Ç–æ), –∏ (5 —á—Ç–æ).
–û–¥–Ω–æ—Ä–æ–¥–Ω—ã–º–∏ —è–≤–ª—è—é—Ç—Å—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è 3 –∏ 5 (–∫–∞–∑–∞–ª–æ—Å—å —á—Ç–æ?). –ù–æ –∫ 3-–µ–º—É –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–æ —Å–≤–æ—ë –ø—Ä–∏–¥–∞—Ç–æ—á–Ω–æ–µ (4-–µ), –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–º –ø–æ–¥—á–∏–Ω–µ–Ω–∏–µ–º, –∏ –µ–≥–æ, —á–µ—Ç–≤–µ—Ä—Ç–æ–µ, –Ω—É–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å –∑–∞–ø—è—Ç–æ–π. –í–æ—Ç –æ—Ç–∫—É–¥–∞ –ø–µ—Ä–µ–¥ ¬´–∏¬ª –±–µ—Ä—ë—Ç—Å—è –∑–∞–ø—è—Ç–∞—è. –ï—Å–ª–∏ –±—ã —á–µ—Ç–≤–µ—Ä—Ç–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–µ –±—ã–ª–æ, –∏ –∑–∞–ø—è—Ç–æ–π –±—ã –º–µ–∂–¥—É –æ–¥–Ω–æ—Ä–æ–¥–Ω—ã–º–∏ –Ω–µ –±—ã–ª–æ. ¬´–í—ã–±—Ä–æ—Å—å—Ç–µ¬ª –µ–≥–æ –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ.
–ó–∞–ø—è—Ç—ã–µ –¥–æ–ª–∂–Ω—ã —Å—Ç–æ—è—Ç—å –Ω–∞ –º–µ—Å—Ç–∞—Ö 1, 2, 3 –∏ 4.'''
    },
    {
        'id' : 2,
        'image': r'/home/KrE3st/bot/–ó–∞–¥–∞–Ω–∏—è/–ó–∞–¥–∞–Ω–∏—è 1/1.2.png',
        'correct': 'B',
        'type': 'type1',
        'keyboard': kb_type1,
        'explanation': '''–ó–∞–ø—è—Ç–∞—è 1 –æ—Ç–¥–µ–ª—è–µ—Ç —á–∞—Å—Ç–∏ —Å–ª–æ–∂–Ω–æ—Å–æ—á–∏–Ω–µ–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.
–ó–∞–ø—è—Ç—ã–µ 3 –∏ 4 –≤—ã–¥–µ–ª—è—é—Ç –ø—Ä–∏–¥–∞—Ç–æ—á–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ ¬´—á—Ç–æ–±—ã –æ—â—É—Ç–∏—Ç—å –∏—Ö –Ω–µ–∂–Ω—É—é –±–∞—Ä—Ö–∞—Ç–∏—Å—Ç–æ—Å—Ç—å¬ª.
–ó–∞–ø—è—Ç—ã–µ –¥–æ–ª–∂–Ω—ã —Å—Ç–æ—è—Ç—å –Ω–∞ –º–µ—Å—Ç–∞—Ö 1, 3 –∏ 4.'''
    },
    {
        'id' : 3,
        'image': r'/home/KrE3st/bot/–ó–∞–¥–∞–Ω–∏—è/–ó–∞–¥–∞–Ω–∏—è 1/1.3.png',
        'correct': 'D',
        'type': 'type1',
        'keyboard': kb_type1,
        'explanation': '''–ü—Ä–∏–≤–µ–¥–µ–º –≤–µ—Ä–Ω–æ–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ.
[–î–∞—à–∞ –∑–∞–º–µ—Ç–∏–ª–∞], (—á—Ç–æ, (–∫–æ–≥–¥–∞ –≤—Å–ª–µ–¥ –∑–∞ –∑–≤–æ–Ω–∫–æ–º –≤ —Å—Ç–æ–ª–æ–≤–æ–π –ø–æ—è–≤–ª—è–ª—Å—è –†–æ—â–∏–Ω), –ö–∞—Ç—è —Å—Ä–∞–∑—É –Ω–µ –ø–æ–≤–æ—Ä–∞—á–∏–≤–∞–ª–∞ –∫ –Ω–µ–º—É –≥–æ–ª–æ–≤—ã, –∞ –º–∏–Ω—É—Ç–æ—á–∫—É –º–µ–¥–ª–∏–ª–∞.)
–ó–∞–ø—è—Ç—ã–µ 1, 2, 3 –æ–±–æ–∑–Ω–∞—á–∞—é—Ç –≥—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏–¥–∞—Ç–æ—á–Ω—ã—Ö –≤ –°–ü–ü; –∑–ø—Ç 4 –¥–ª—è –æ–¥–Ω–æ—Ä–æ–¥–Ω—ã—Ö —Å–∫–∞–∑—É–µ–º—ã—Ö.
–û—Ç–≤–µ—Ç: 1234'''
    },
    {
        'id' : 4,
        'image': r'/home/KrE3st/bot/–ó–∞–¥–∞–Ω–∏—è/–ó–∞–¥–∞–Ω–∏—è 1/1.4.png',
        'correct': 'A',
        'type': 'type1',
        'keyboard': kb_type1,
        'explanation': '''–ü—Ä–∏–≤–µ–¥–µ–º –≤–µ—Ä–Ω–æ–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ.
[–° –ö—É–∑–Ω–µ—Ü–∫–æ–≥–æ –º–æ—Å—Ç–∞ —è –∑–∞–µ—Ö–∞–ª –≤ –∫–æ–Ω–¥–∏—Ç–µ—Ä—Å–∫—É—é –Ω–∞ –¢–≤–µ—Ä—Å–∫–æ–π –∏, (—Ö–æ—Ç—è –∂–µ–ª–∞–ª –ø—Ä–∏—Ç–≤–æ—Ä–∏—Ç—å—Å—è), –Ω–µ—Ç –≤—Ç–æ—Ä–æ–π —á–∞—Å—Ç–∏(—á—Ç–æ –º–µ–Ω—è –≤ –∫–æ–Ω–¥–∏—Ç–µ—Ä—Å–∫–æ–π –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç –≥–∞–∑–µ—Ç—ã), –Ω–µ —Å–º–æ–≥ —É–¥–µ—Ä–∂–∞—Ç—å—Å—è –æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–ª–∞–¥–∫–∏—Ö –ø–∏—Ä–æ–∂–∫–æ–≤].
–ó–∞–ø—è—Ç—ã–µ –ø–æ–¥ –Ω–æ–º–µ—Ä–∞–º–∏ 2, 3, 4 –≤—ã–¥–µ–ª—è—é—Ç –ø—Ä–∏–¥–∞—Ç–æ—á–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.
–ó–∞–ø—è—Ç—ã–µ –¥–æ–ª–∂–Ω—ã —Å—Ç–æ—è—Ç—å –Ω–∞ –º–µ—Å—Ç–∞—Ö 2, 3 –∏ 4.'''
    },
    {
        'id' : 5,
        'image': r'/home/KrE3st/bot/–ó–∞–¥–∞–Ω–∏—è/–ó–∞–¥–∞–Ω–∏—è 1/1.5.png',
        'correct': 'B',
        'type': 'type1',
        'keyboard': kb_type1,
        'explanation': '''–ü—Ä–∏–≤–µ–¥–µ–º –≤–µ—Ä–Ω–æ–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ.
–û–Ω–∏ –∑–∞–≥–æ–≤–æ—Ä–∏–ª–∏ –æ –∑–¥–æ—Ä–æ–≤—å–µ –≥—Ä–∞—Ñ–∏–Ω–∏ –∏ –æ–± –æ–±—â–∏—Ö –∑–Ω–∞–∫–æ–º—ã—Ö, (1) –∏, (2) –∫–æ–≥–¥–∞ –ø—Ä–æ—à–ª–∏ —Ç–µ —Ç—Ä–µ–±—É–µ–º—ã–µ –ø—Ä–∏–ª–∏—á–∏–µ–º –¥–µ—Å—è—Ç—å –º–∏–Ω—É—Ç, (3) –ø–æ—Å–ª–µ –∫–æ—Ç–æ—Ä—ã—Ö –≥–æ—Å—Ç—å –º–æ–∂–µ—Ç –≤—Å—Ç–∞—Ç—å, (4) –ù–∏–∫–æ–ª–∞–π –ø–æ–¥–Ω—è–ª—Å—è –∏ —Å—Ç–∞–ª –ø—Ä–æ—â–∞—Ç—å—Å—è.
–ó–∞–ø—è—Ç–∞—è –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º 1 –æ—Ç–¥–µ–ª—è–µ—Ç —á–∞—Å—Ç–∏ —Å–ª–æ–∂–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, —Å–æ–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ —Å–æ—é–∑–æ–º –ò, –∑–∞–ø—è—Ç—ã–µ –ø–æ–¥ –Ω–æ–º–µ—Ä–∞–º–∏ 2, 3, 4 –≤—ã–¥–µ–ª—è—é—Ç –ø—Ä–∏–¥–∞—Ç–æ—á–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.
–ó–∞–ø—è—Ç—ã–µ –¥–æ–ª–∂–Ω—ã —Å—Ç–æ—è—Ç—å –Ω–∞ –º–µ—Å—Ç–∞—Ö 1, 2, 3 –∏ 4.'''
    },
    {
        'id' : 6,
        'image': r'/home/KrE3st/bot/–ó–∞–¥–∞–Ω–∏—è/–ó–∞–¥–∞–Ω–∏—è 1/1.6.png',
        'correct': 'D',
        'type': 'type1',
        'keyboard': kb_type1,
        'explanation': '''–†–∞—Å—Å—Ç–∞–≤–∏–º –∑–∞–ø—è—Ç—ã–µ.
–°—Ç–æ—è–ª–∞ –∂–∞—Ä–∞, (1) –∏, (2) –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –Ω–∞–ª–µ—Ç–∞–ª –≤–µ—Ç–µ—Ä–æ–∫ (3) –∏ –ø—Ä–∏–Ω–æ—Å–∏–ª —Å —Å–æ–±–æ–π –ø—Ä–æ—Ö–ª–∞–¥—É, (4) –¥–µ—Ä–µ–≤—å—è –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ –∫–∏–≤–∞–ª–∏ –≤–µ—Ç–≤—è–º–∏.
–ó–∞–ø—è—Ç–∞—è –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º 1 –æ—Ç–¥–µ–ª—è–µ—Ç –æ—Å–Ω–æ–≤—ã: ¬´—Å—Ç–æ—è–ª–∞ –∂–∞—Ä–∞¬ª –∏ ¬´–¥–µ—Ä–µ–≤—å—è –∫–∏–≤–∞–ª–∏¬ª; –∑–∞–ø—è—Ç—ã–µ –ø–æ–¥ –Ω–æ–º–µ—Ä–∞–º–∏ 2 –∏ 4 –≤—ã–¥–µ–ª—è—é—Ç –ø—Ä–∏–¥–∞—Ç–æ—á–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ ¬´–µ—Å–ª–∏ –≤–¥—Ä—É–≥ –Ω–∞–ª–µ—Ç–∞–ª –≤–µ—Ç–µ—Ä–æ–∫ –∏ –ø—Ä–∏–Ω–æ—Å–∏–ª —Å —Å–æ–±–æ–π –ø—Ä–æ—Ö–ª–∞–¥—É¬ª.
–ó–∞–ø—è—Ç—ã–µ –¥–æ–ª–∂–Ω—ã —Å—Ç–æ—è—Ç—å –Ω–∞ –º–µ—Å—Ç–∞—Ö 1, 2 –∏ 4.'''
    },

    # –ó–∞–¥–∞–Ω–∏—è —Ç–∏–ø–∞ 2 (–ê, –ë, –í)
    {
        'id' : 7,
        'image': r'/home/KrE3st/bot/–ó–∞–¥–∞–Ω–∏—è/–ó–∞–¥–∞–Ω–∏—è 2/2.1.png',
        'correct': 'B',
        'type': 'type2',
        'keyboard': kb_type2,
        'explanation': '''–ï—Å–ª–∏ –ø–æ–π–¥—ë—Ç –¥–æ–∂–¥—å, –º—ã –æ—Å—Ç–∞–Ω–µ–º—Å—è –¥–æ–º–∞, –∞ –µ—Å–ª–∏ –±—É–¥–µ—Ç —Å–æ–ª–Ω–µ—á–Ω–æ, –ø–æ–π–¥—ë–º –≥—É–ª—è—Ç—å.
–ó–¥–µ—Å—å –¥–≤–µ –ø—Ä–∏–¥–∞—Ç–æ—á–Ω—ã–µ —á–∞—Å—Ç–∏ —Ä–∞–≤–Ω–æ–ø—Ä–∞–≤–Ω—ã –∏ —Å–æ–µ–¥–∏–Ω–µ–Ω—ã —Å–æ—é–∑–æ–º ¬´–∞¬ª. –û–Ω–∏ –æ–±–µ –æ—Ç–≤–µ—á–∞—é—Ç –Ω–∞ –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –≤–æ–ø—Ä–æ—Å –≥–ª–∞–≤–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (¬´–ß—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç, –µ—Å–ª–∏...¬ª), –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—É—é –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ñ–æ—Ä–º—É –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É ‚Äî –∑–Ω–∞—á–∏—Ç, –ø–æ–¥—á–∏–Ω–µ–Ω–∏–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ.
'''
    },
    {
        'id' : 8,
        'image': r'/home/KrE3st/bot/–ó–∞–¥–∞–Ω–∏—è/–ó–∞–¥–∞–Ω–∏—è 2/2.2.png',
        'correct': 'C',
        'type': 'type2',
        'keyboard': kb_type2,
        'explanation': '''–Ø –∑–Ω–∞—é, —á—Ç–æ –æ–Ω –ø—Ä–∏–µ–¥–µ—Ç, –∏ —á—Ç–æ –ø—Ä–∏–≤–µ–∑—ë—Ç –ø–æ–¥–∞—Ä–æ–∫.
–ü–µ—Ä–≤–æ–µ –ø—Ä–∏–¥–∞—Ç–æ—á–Ω–æ–µ (¬´—á—Ç–æ –æ–Ω –ø—Ä–∏–µ–¥–µ—Ç¬ª) –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—é, –≤—Ç–æ—Ä–æ–µ (¬´—á—Ç–æ –ø—Ä–∏–≤–µ–∑—ë—Ç –ø–æ–¥–∞—Ä–æ–∫¬ª) –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–∏–¥–∞—Ç–æ—á–Ω–æ–≥–æ. –ü–æ–¥—á–∏–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –∏–¥—É—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –æ–¥–Ω–æ –∑–∞ –¥—Ä—É–≥–∏–º.
'''
    },
    {
        'id' : 9,
        'image': r'/home/KrE3st/bot/–ó–∞–¥–∞–Ω–∏—è/–ó–∞–¥–∞–Ω–∏—è 2/2.3.png',
        'correct': 'B',
        'type': 'type2',
        'keyboard': kb_type2,
        'explanation': '''–Ø –¥—É–º–∞—é, —á—Ç–æ –æ–Ω —Å–¥–∞—Å—Ç —ç–∫–∑–∞–º–µ–Ω, –ø–æ—Ç–æ–º—É —á—Ç–æ —Ö–æ—Ä–æ—à–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª—Å—è.
–ü—Ä–∏–¥–∞—Ç–æ—á–Ω—ã–µ —á–∞—Å—Ç–∏ (¬´—á—Ç–æ –æ–Ω —Å–¥–∞—Å—Ç —ç–∫–∑–∞–º–µ–Ω¬ª, ¬´–ø–æ—Ç–æ–º—É —á—Ç–æ —Ö–æ—Ä–æ—à–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª—Å—è¬ª) –∑–∞–≤–∏—Å—è—Ç –æ—Ç –æ–¥–Ω–æ–≥–æ –∏ —Ç–æ–≥–æ –∂–µ –≥–ª–∞–≤–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö –ø—Ä–∏—á–∏–Ω—ã –∏ —Å–ª–µ–¥—Å—Ç–≤–∏—è, –æ–±–∞ –æ—Ç–≤–µ—á–∞—é—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞ (¬´–ü–æ—á–µ–º—É —è —Ç–∞–∫ –¥—É–º–∞—é?¬ª). –≠—Ç–æ –∏–º–µ–Ω–Ω–æ –æ–¥–Ω–æ—Ä–æ–¥–Ω–æ–µ –ø–æ–¥—á–∏–Ω–µ–Ω–∏–µ.
'''
    },
    {
        'id' : 10,
        'image': r'/home/KrE3st/bot/–ó–∞–¥–∞–Ω–∏—è/–ó–∞–¥–∞–Ω–∏—è 2/2.4.png',
        'correct': 'A',
        'type': 'type2',
        'keyboard': kb_type2,
        'explanation': '''
        –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–¥—á–∏–Ω–µ–Ω–∏–µ –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –≤—Ç–æ—Ä–æ–π –ø—Ä–∏–¥–∞—Ç–æ—á–Ω–æ–π —á–∞—Å—Ç–∏ –æ—Ç –ø–µ—Ä–≤–æ–π.'''
    },
    {
        'id' : 11,
        'image': r'/home/KrE3st/bot/–ó–∞–¥–∞–Ω–∏—è/–ó–∞–¥–∞–Ω–∏—è 2/2.5.png',
        'correct': 'C',
        'type': 'type2',
        'keyboard': kb_type2,
        'explanation': '''–û–Ω —Å–∫–∞–∑–∞–ª, —á—Ç–æ —Å–¥–∞—Å—Ç —ç–∫–∑–∞–º–µ–Ω –∏ —á—Ç–æ –±—É–¥–µ—Ç –ø–æ—Å—Ç—É–ø–∞—Ç—å –≤ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç.
–ó–¥–µ—Å—å –≤—Ç–æ—Ä–æ–µ –ø—Ä–∏–¥–∞—Ç–æ—á–Ω–æ–µ (¬´—á—Ç–æ –±—É–¥–µ—Ç –ø–æ—Å—Ç—É–ø–∞—Ç—å –≤ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç¬ª) —Å–≤—è–∑–∞–Ω–æ —Å –ø–µ—Ä–≤—ã–º (¬´—á—Ç–æ —Å–¥–∞—Å—Ç —ç–∫–∑–∞–º–µ–Ω¬ª), –∞ —Å–∞–º–æ –ø–µ—Ä–≤–æ–µ —Å–≤—è–∑–∞–Ω–æ —Å –≥–ª–∞–≤–Ω—ã–º (¬´–æ–Ω —Å–∫–∞–∑–∞–ª¬ª). –ü–æ–ª—É—á–∏–ª–∞—Å—å —Ü–µ–ø–æ—á–∫–∞ –ø–æ–¥—á–∏–Ω–µ–Ω–∏—è, —Ç–æ –µ—Å—Ç—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–¥—á–∏–Ω–µ–Ω–∏–µ.
'''
    },
    {
        'id' : 12,
        'image': r'/home/KrE3st/bot/–ó–∞–¥–∞–Ω–∏—è/–ó–∞–¥–∞–Ω–∏—è 2/2.6.png',
        'correct': 'B',
        'type': 'type2',
        'keyboard': kb_type2,
        'explanation': '''–≠—Ç–∏ –ø—Ä–∏–¥–∞—Ç–æ—á–Ω—ã–µ –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—é (¬´–ú—ã –ø–æ—à–ª–∏ –≤ –ø–∞—Ä–∫¬ª) –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –¥—Ä—É–≥ –æ—Ç –¥—Ä—É–≥–∞ –∏ –Ω–µ –≤—ã—Å—Ç—Ä–∞–∏–≤–∞—é—Ç—Å—è –≤ —Ü–µ–ø–æ—á–∫—É, –≥–¥–µ –æ–¥–Ω–æ –ø—Ä–∏–¥–∞—Ç–æ—á–Ω–æ–µ –∑–∞–≤–∏—Å–µ–ª–æ –±—ã –æ—Ç –¥—Ä—É–≥–æ–≥–æ. –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ, –ø—Ä–∏–¥–∞—Ç–æ—á–Ω—ã–µ —á–∞—Å—Ç–∏ —Å–æ–µ–¥–∏–Ω—è—é—Ç—Å—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ.
        '''
    },
    # –ó–∞–¥–∞–Ω–∏—è —Ç–∏–ø–∞ 3 (–ü—Ä–∞–≤–¥–∞/–õ–æ–∂—å)

# –î–æ–±–∞–≤—å—Ç–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏
    ]
def validate_task(task):
    required_fields = ['id', 'image', 'correct', 'type', 'keyboard', 'explanation']
    for field in required_fields:
        if field not in task:
            return False, f"Missing field: {field}"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ç–∏–ø–∞ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    keyboard_mapping = {
        'type1': kb_type1,
        'type2': kb_type2,
        'type3': kb_type3
    }

    if task['type'] in keyboard_mapping:
        if task['keyboard'] != keyboard_mapping[task['type']]:
            return False, f"Keyboard mismatch for type {task['type']}"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    valid_answers = {
        'type1': ['A', 'B', 'C', 'D'],
        'type2': ['A', 'B', 'C'],
        'type3': ['true', 'false']
    }

    if task['type'] in valid_answers:
        if task['correct'].upper() not in [ans.upper() for ans in valid_answers[task['type']]]:
            return False, f"Invalid correct answer format: {task['correct']}"

    return True, "Task is valid"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def validate_database():
    for task in BD:
        is_valid, message = validate_task(task)
        if not is_valid:
            logging.error(f"Task {task['id']}: {message}")
            return False
    return True





async def main():
    try:
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            filename='bot.log'  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª
        )

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞
        dp.include_router(router)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É —Å–±—Ä–æ—Å–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
        asyncio.create_task(reset_daily_limits())

        # –ó–∞–ø—É—Å–∫–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        for user_id in subscribed_users:
            await schedule_next_notification(user_id)

        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        await dp.start_polling(bot, skip_updates=True)
    except Exception as e:
        logging.error(f"Critical error: {e}")
        raise





if __name__ == "__main__":
    asyncio.run(main())
